// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AggregationRoundCompleted extends ethereum.Event {
  get params(): AggregationRoundCompleted__Params {
    return new AggregationRoundCompleted__Params(this);
  }
}

export class AggregationRoundCompleted__Params {
  _event: AggregationRoundCompleted;

  constructor(event: AggregationRoundCompleted) {
    this._event = event;
  }

  get aggregationRoundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AggregationRoundStarted extends ethereum.Event {
  get params(): AggregationRoundStarted__Params {
    return new AggregationRoundStarted__Params(this);
  }
}

export class AggregationRoundStarted__Params {
  _event: AggregationRoundStarted;

  constructor(event: AggregationRoundStarted) {
    this._event = event;
  }

  get aggregationRoundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AggregationSettingsUpdated extends ethereum.Event {
  get params(): AggregationSettingsUpdated__Params {
    return new AggregationSettingsUpdated__Params(this);
  }
}

export class AggregationSettingsUpdated__Params {
  _event: AggregationSettingsUpdated;

  constructor(event: AggregationSettingsUpdated) {
    this._event = event;
  }

  get priceAggregationMethod(): string {
    return this._event.parameters[0].value.toString();
  }

  get mininumPriceConfirmations(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class CountryTrackerCreated extends ethereum.Event {
  get params(): CountryTrackerCreated__Params {
    return new CountryTrackerCreated__Params(this);
  }
}

export class CountryTrackerCreated__Params {
  _event: CountryTrackerCreated;

  constructor(event: CountryTrackerCreated) {
    this._event = event;
  }

  get country(): string {
    return this._event.parameters[0].value.toString();
  }

  get currency(): string {
    return this._event.parameters[1].value.toString();
  }

  get contractAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProductDetailsUpdated extends ethereum.Event {
  get params(): ProductDetailsUpdated__Params {
    return new ProductDetailsUpdated__Params(this);
  }
}

export class ProductDetailsUpdated__Params {
  _event: ProductDetailsUpdated;

  constructor(event: ProductDetailsUpdated) {
    this._event = event;
  }

  get productsCID(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class Stable__suppliersResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: i32;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: string,
    value1: BigInt,
    value2: BigInt,
    value3: i32,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class Stable extends ethereum.SmartContract {
  static bind(address: Address): Stable {
    return new Stable("Stable", address);
  }

  aggregationDuration(): BigInt {
    let result = super.call(
      "aggregationDuration",
      "aggregationDuration():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_aggregationDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "aggregationDuration",
      "aggregationDuration():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aggregationRoundId(): BigInt {
    let result = super.call(
      "aggregationRoundId",
      "aggregationRoundId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_aggregationRoundId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "aggregationRoundId",
      "aggregationRoundId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aggregationRoundOverdueDuration(): i32 {
    let result = super.call(
      "aggregationRoundOverdueDuration",
      "aggregationRoundOverdueDuration():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_aggregationRoundOverdueDuration(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "aggregationRoundOverdueDuration",
      "aggregationRoundOverdueDuration():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  aggregationRoundsClaimed(param0: Address): BigInt {
    let result = super.call(
      "aggregationRoundsClaimed",
      "aggregationRoundsClaimed(address):(uint32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_aggregationRoundsClaimed(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "aggregationRoundsClaimed",
      "aggregationRoundsClaimed(address):(uint32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aggregatorLockDuration(): BigInt {
    let result = super.call(
      "aggregatorLockDuration",
      "aggregatorLockDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_aggregatorLockDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "aggregatorLockDuration",
      "aggregatorLockDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aggregatorLockTime(param0: Address): BigInt {
    let result = super.call(
      "aggregatorLockTime",
      "aggregatorLockTime(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_aggregatorLockTime(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "aggregatorLockTime",
      "aggregatorLockTime(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aggregatorLockedAmounts(param0: Address): BigInt {
    let result = super.call(
      "aggregatorLockedAmounts",
      "aggregatorLockedAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_aggregatorLockedAmounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "aggregatorLockedAmounts",
      "aggregatorLockedAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canClaimNextAggregationRound(aggregator: Address): boolean {
    let result = super.call(
      "canClaimNextAggregationRound",
      "canClaimNextAggregationRound(address):(bool)",
      [ethereum.Value.fromAddress(aggregator)]
    );

    return result[0].toBoolean();
  }

  try_canClaimNextAggregationRound(
    aggregator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canClaimNextAggregationRound",
      "canClaimNextAggregationRound(address):(bool)",
      [ethereum.Value.fromAddress(aggregator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  countries(param0: BigInt): string {
    let result = super.call("countries", "countries(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_countries(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("countries", "countries(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  countryTrackers(param0: string): Address {
    let result = super.call(
      "countryTrackers",
      "countryTrackers(string):(address)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toAddress();
  }

  try_countryTrackers(param0: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "countryTrackers",
      "countryTrackers(string):(address)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  countryWeightage(param0: string): i32 {
    let result = super.call(
      "countryWeightage",
      "countryWeightage(string):(uint16)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toI32();
  }

  try_countryWeightage(param0: string): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "countryWeightage",
      "countryWeightage(string):(uint16)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  currentAggregator(): Address {
    let result = super.call(
      "currentAggregator",
      "currentAggregator():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_currentAggregator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "currentAggregator",
      "currentAggregator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGlobalPriceIndex(): BigInt {
    let result = super.call(
      "getGlobalPriceIndex",
      "getGlobalPriceIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getGlobalPriceIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGlobalPriceIndex",
      "getGlobalPriceIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMintableStableTokenCount(): BigInt {
    let result = super.call(
      "getMintableStableTokenCount",
      "getMintableStableTokenCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMintableStableTokenCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMintableStableTokenCount",
      "getMintableStableTokenCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSZRPriceInUSD(): BigInt {
    let result = super.call(
      "getSZRPriceInUSD",
      "getSZRPriceInUSD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSZRPriceInUSD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSZRPriceInUSD",
      "getSZRPriceInUSD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSZRWithdrawableBySupplier(_account: Address): BigInt {
    let result = super.call(
      "getSZRWithdrawableBySupplier",
      "getSZRWithdrawableBySupplier(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBigInt();
  }

  try_getSZRWithdrawableBySupplier(
    _account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSZRWithdrawableBySupplier",
      "getSZRWithdrawableBySupplier(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStableTokenPrice(): BigInt {
    let result = super.call(
      "getStableTokenPrice",
      "getStableTokenPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStableTokenPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStableTokenPrice",
      "getStableTokenPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isAggregationRoundOverdue(): boolean {
    let result = super.call(
      "isAggregationRoundOverdue",
      "isAggregationRoundOverdue():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isAggregationRoundOverdue(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAggregationRoundOverdue",
      "isAggregationRoundOverdue():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mininumPriceConfirmations(): i32 {
    let result = super.call(
      "mininumPriceConfirmations",
      "mininumPriceConfirmations():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_mininumPriceConfirmations(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "mininumPriceConfirmations",
      "mininumPriceConfirmations():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  overCollateralizationRatio(): BigInt {
    let result = super.call(
      "overCollateralizationRatio",
      "overCollateralizationRatio():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_overCollateralizationRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "overCollateralizationRatio",
      "overCollateralizationRatio():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceAggregationMethod(): string {
    let result = super.call(
      "priceAggregationMethod",
      "priceAggregationMethod():(string)",
      []
    );

    return result[0].toString();
  }

  try_priceAggregationMethod(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "priceAggregationMethod",
      "priceAggregationMethod():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  productsCID(): string {
    let result = super.call("productsCID", "productsCID():(string)", []);

    return result[0].toString();
  }

  try_productsCID(): ethereum.CallResult<string> {
    let result = super.tryCall("productsCID", "productsCID():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  rewards(param0: Address): BigInt {
    let result = super.call("rewards", "rewards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_rewards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewards", "rewards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stableToken(): Address {
    let result = super.call("stableToken", "stableToken():(address)", []);

    return result[0].toAddress();
  }

  try_stableToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stableToken", "stableToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  suppliers(param0: Address): Stable__suppliersResult {
    let result = super.call(
      "suppliers",
      "suppliers(address):(string,uint256,uint256,uint16,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Stable__suppliersResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_suppliers(param0: Address): ethereum.CallResult<Stable__suppliersResult> {
    let result = super.tryCall(
      "suppliers",
      "suppliers(address):(string,uint256,uint256,uint16,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Stable__suppliersResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  szrRewardForWinningSubmissions(): BigInt {
    let result = super.call(
      "szrRewardForWinningSubmissions",
      "szrRewardForWinningSubmissions():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_szrRewardForWinningSubmissions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "szrRewardForWinningSubmissions",
      "szrRewardForWinningSubmissions():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  szrRewardPerAggregationRound(): BigInt {
    let result = super.call(
      "szrRewardPerAggregationRound",
      "szrRewardPerAggregationRound():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_szrRewardPerAggregationRound(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "szrRewardPerAggregationRound",
      "szrRewardPerAggregationRound():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  szrToken(): Address {
    let result = super.call("szrToken", "szrToken():(address)", []);

    return result[0].toAddress();
  }

  try_szrToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("szrToken", "szrToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalLockedAmount(): BigInt {
    let result = super.call(
      "totalLockedAmount",
      "totalLockedAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalLockedAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalLockedAmount",
      "totalLockedAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSZRClaimable(): BigInt {
    let result = super.call(
      "totalSZRClaimable",
      "totalSZRClaimable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalSZRClaimable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSZRClaimable",
      "totalSZRClaimable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStablesRedeemable(): BigInt {
    let result = super.call(
      "totalStablesRedeemable",
      "totalStablesRedeemable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalStablesRedeemable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStablesRedeemable",
      "totalStablesRedeemable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _initialSZRSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _overCollateralizationRatio(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _initialAggregationRoundId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _productsCID(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddSupplierCall extends ethereum.Call {
  get inputs(): AddSupplierCall__Inputs {
    return new AddSupplierCall__Inputs(this);
  }

  get outputs(): AddSupplierCall__Outputs {
    return new AddSupplierCall__Outputs(this);
  }
}

export class AddSupplierCall__Inputs {
  _call: AddSupplierCall;

  constructor(call: AddSupplierCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _stablesRedeemable(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _claimPercent(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _szrRewardsPerRedemption(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AddSupplierCall__Outputs {
  _call: AddSupplierCall;

  constructor(call: AddSupplierCall) {
    this._call = call;
  }
}

export class AggregatorWithdrawLockedCall extends ethereum.Call {
  get inputs(): AggregatorWithdrawLockedCall__Inputs {
    return new AggregatorWithdrawLockedCall__Inputs(this);
  }

  get outputs(): AggregatorWithdrawLockedCall__Outputs {
    return new AggregatorWithdrawLockedCall__Outputs(this);
  }
}

export class AggregatorWithdrawLockedCall__Inputs {
  _call: AggregatorWithdrawLockedCall;

  constructor(call: AggregatorWithdrawLockedCall) {
    this._call = call;
  }
}

export class AggregatorWithdrawLockedCall__Outputs {
  _call: AggregatorWithdrawLockedCall;

  constructor(call: AggregatorWithdrawLockedCall) {
    this._call = call;
  }
}

export class BurnStableCall extends ethereum.Call {
  get inputs(): BurnStableCall__Inputs {
    return new BurnStableCall__Inputs(this);
  }

  get outputs(): BurnStableCall__Outputs {
    return new BurnStableCall__Outputs(this);
  }
}

export class BurnStableCall__Inputs {
  _call: BurnStableCall;

  constructor(call: BurnStableCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnStableCall__Outputs {
  _call: BurnStableCall;

  constructor(call: BurnStableCall) {
    this._call = call;
  }
}

export class ClaimNextAggregationRoundCall extends ethereum.Call {
  get inputs(): ClaimNextAggregationRoundCall__Inputs {
    return new ClaimNextAggregationRoundCall__Inputs(this);
  }

  get outputs(): ClaimNextAggregationRoundCall__Outputs {
    return new ClaimNextAggregationRoundCall__Outputs(this);
  }
}

export class ClaimNextAggregationRoundCall__Inputs {
  _call: ClaimNextAggregationRoundCall;

  constructor(call: ClaimNextAggregationRoundCall) {
    this._call = call;
  }
}

export class ClaimNextAggregationRoundCall__Outputs {
  _call: ClaimNextAggregationRoundCall;

  constructor(call: ClaimNextAggregationRoundCall) {
    this._call = call;
  }
}

export class CompleteAggregationCall extends ethereum.Call {
  get inputs(): CompleteAggregationCall__Inputs {
    return new CompleteAggregationCall__Inputs(this);
  }

  get outputs(): CompleteAggregationCall__Outputs {
    return new CompleteAggregationCall__Outputs(this);
  }
}

export class CompleteAggregationCall__Inputs {
  _call: CompleteAggregationCall;

  constructor(call: CompleteAggregationCall) {
    this._call = call;
  }

  get winners(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class CompleteAggregationCall__Outputs {
  _call: CompleteAggregationCall;

  constructor(call: CompleteAggregationCall) {
    this._call = call;
  }
}

export class CreateCountryTrackerCall extends ethereum.Call {
  get inputs(): CreateCountryTrackerCall__Inputs {
    return new CreateCountryTrackerCall__Inputs(this);
  }

  get outputs(): CreateCountryTrackerCall__Outputs {
    return new CreateCountryTrackerCall__Outputs(this);
  }
}

export class CreateCountryTrackerCall__Inputs {
  _call: CreateCountryTrackerCall;

  constructor(call: CreateCountryTrackerCall) {
    this._call = call;
  }

  get _country(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _currency(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _countryWeightage(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class CreateCountryTrackerCall__Outputs {
  _call: CreateCountryTrackerCall;

  constructor(call: CreateCountryTrackerCall) {
    this._call = call;
  }
}

export class EnrollAsAggregatorCall extends ethereum.Call {
  get inputs(): EnrollAsAggregatorCall__Inputs {
    return new EnrollAsAggregatorCall__Inputs(this);
  }

  get outputs(): EnrollAsAggregatorCall__Outputs {
    return new EnrollAsAggregatorCall__Outputs(this);
  }
}

export class EnrollAsAggregatorCall__Inputs {
  _call: EnrollAsAggregatorCall;

  constructor(call: EnrollAsAggregatorCall) {
    this._call = call;
  }

  get _amountToLock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EnrollAsAggregatorCall__Outputs {
  _call: EnrollAsAggregatorCall;

  constructor(call: EnrollAsAggregatorCall) {
    this._call = call;
  }
}

export class MintStableCall extends ethereum.Call {
  get inputs(): MintStableCall__Inputs {
    return new MintStableCall__Inputs(this);
  }

  get outputs(): MintStableCall__Outputs {
    return new MintStableCall__Outputs(this);
  }
}

export class MintStableCall__Inputs {
  _call: MintStableCall;

  constructor(call: MintStableCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintStableCall__Outputs {
  _call: MintStableCall;

  constructor(call: MintStableCall) {
    this._call = call;
  }
}

export class RedeemStableCall extends ethereum.Call {
  get inputs(): RedeemStableCall__Inputs {
    return new RedeemStableCall__Inputs(this);
  }

  get outputs(): RedeemStableCall__Outputs {
    return new RedeemStableCall__Outputs(this);
  }
}

export class RedeemStableCall__Inputs {
  _call: RedeemStableCall;

  constructor(call: RedeemStableCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _supplier(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RedeemStableCall__Outputs {
  _call: RedeemStableCall;

  constructor(call: RedeemStableCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SlashAggregatorCall extends ethereum.Call {
  get inputs(): SlashAggregatorCall__Inputs {
    return new SlashAggregatorCall__Inputs(this);
  }

  get outputs(): SlashAggregatorCall__Outputs {
    return new SlashAggregatorCall__Outputs(this);
  }
}

export class SlashAggregatorCall__Inputs {
  _call: SlashAggregatorCall;

  constructor(call: SlashAggregatorCall) {
    this._call = call;
  }

  get aggregator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SlashAggregatorCall__Outputs {
  _call: SlashAggregatorCall;

  constructor(call: SlashAggregatorCall) {
    this._call = call;
  }
}

export class SupplierWithdrawSZRCall extends ethereum.Call {
  get inputs(): SupplierWithdrawSZRCall__Inputs {
    return new SupplierWithdrawSZRCall__Inputs(this);
  }

  get outputs(): SupplierWithdrawSZRCall__Outputs {
    return new SupplierWithdrawSZRCall__Outputs(this);
  }
}

export class SupplierWithdrawSZRCall__Inputs {
  _call: SupplierWithdrawSZRCall;

  constructor(call: SupplierWithdrawSZRCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SupplierWithdrawSZRCall__Outputs {
  _call: SupplierWithdrawSZRCall;

  constructor(call: SupplierWithdrawSZRCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateAggregationSettingsCall extends ethereum.Call {
  get inputs(): UpdateAggregationSettingsCall__Inputs {
    return new UpdateAggregationSettingsCall__Inputs(this);
  }

  get outputs(): UpdateAggregationSettingsCall__Outputs {
    return new UpdateAggregationSettingsCall__Outputs(this);
  }
}

export class UpdateAggregationSettingsCall__Inputs {
  _call: UpdateAggregationSettingsCall;

  constructor(call: UpdateAggregationSettingsCall) {
    this._call = call;
  }

  get _priceAggregationMethod(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _mininumPriceConfirmations(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _aggregationRoundOverdueDuration(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _szrRewardPerAggregationRound(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _aggregatorLockDuration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _szrRewardForWinningSubmissions(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class UpdateAggregationSettingsCall__Outputs {
  _call: UpdateAggregationSettingsCall;

  constructor(call: UpdateAggregationSettingsCall) {
    this._call = call;
  }
}

export class UpdateBasketCall extends ethereum.Call {
  get inputs(): UpdateBasketCall__Inputs {
    return new UpdateBasketCall__Inputs(this);
  }

  get outputs(): UpdateBasketCall__Outputs {
    return new UpdateBasketCall__Outputs(this);
  }
}

export class UpdateBasketCall__Inputs {
  _call: UpdateBasketCall;

  constructor(call: UpdateBasketCall) {
    this._call = call;
  }

  get _country(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _productIds(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get _weightages(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }
}

export class UpdateBasketCall__Outputs {
  _call: UpdateBasketCall;

  constructor(call: UpdateBasketCall) {
    this._call = call;
  }
}

export class UpdateOverCollateralizationRatioCall extends ethereum.Call {
  get inputs(): UpdateOverCollateralizationRatioCall__Inputs {
    return new UpdateOverCollateralizationRatioCall__Inputs(this);
  }

  get outputs(): UpdateOverCollateralizationRatioCall__Outputs {
    return new UpdateOverCollateralizationRatioCall__Outputs(this);
  }
}

export class UpdateOverCollateralizationRatioCall__Inputs {
  _call: UpdateOverCollateralizationRatioCall;

  constructor(call: UpdateOverCollateralizationRatioCall) {
    this._call = call;
  }

  get _overCollateralizationRatio(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class UpdateOverCollateralizationRatioCall__Outputs {
  _call: UpdateOverCollateralizationRatioCall;

  constructor(call: UpdateOverCollateralizationRatioCall) {
    this._call = call;
  }
}

export class UpdateProductsCall extends ethereum.Call {
  get inputs(): UpdateProductsCall__Inputs {
    return new UpdateProductsCall__Inputs(this);
  }

  get outputs(): UpdateProductsCall__Outputs {
    return new UpdateProductsCall__Outputs(this);
  }
}

export class UpdateProductsCall__Inputs {
  _call: UpdateProductsCall;

  constructor(call: UpdateProductsCall) {
    this._call = call;
  }

  get _updatedProductsCID(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class UpdateProductsCall__Outputs {
  _call: UpdateProductsCall;

  constructor(call: UpdateProductsCall) {
    this._call = call;
  }
}

export class UpdateSupplierConfigCall extends ethereum.Call {
  get inputs(): UpdateSupplierConfigCall__Inputs {
    return new UpdateSupplierConfigCall__Inputs(this);
  }

  get outputs(): UpdateSupplierConfigCall__Outputs {
    return new UpdateSupplierConfigCall__Outputs(this);
  }
}

export class UpdateSupplierConfigCall__Inputs {
  _call: UpdateSupplierConfigCall;

  constructor(call: UpdateSupplierConfigCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stablesRedeemable(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _claimPercent(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _szrRewardsPerRedemption(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateSupplierConfigCall__Outputs {
  _call: UpdateSupplierConfigCall;

  constructor(call: UpdateSupplierConfigCall) {
    this._call = call;
  }
}

export class WithdrawRewardsCall extends ethereum.Call {
  get inputs(): WithdrawRewardsCall__Inputs {
    return new WithdrawRewardsCall__Inputs(this);
  }

  get outputs(): WithdrawRewardsCall__Outputs {
    return new WithdrawRewardsCall__Outputs(this);
  }
}

export class WithdrawRewardsCall__Inputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawRewardsCall__Outputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }
}
